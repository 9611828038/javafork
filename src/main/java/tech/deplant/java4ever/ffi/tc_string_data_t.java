package tech.deplant.java4ever.ffi;
// Generated by jextract

import jdk.incubator.foreign.*;

import java.lang.invoke.VarHandle;
import java.nio.charset.Charset;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;

public final class tc_string_data_t {

    static final Charset CHARSET = Charset.forName("UTF-8");

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
            C_POINTER.withName("content"),
            C_INT.withName("len"),
            MemoryLayout.paddingLayout(32)
    );
    static final VarHandle content$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("content")));
    static final VarHandle len$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("len"));

    public static MemoryLayout $LAYOUT() {
        return tc_string_data_t.$struct$LAYOUT;
    }

    public static VarHandle content$VH() {
        return tc_string_data_t.content$VH;
    }

    public static MemoryAddress content$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) tc_string_data_t.content$VH.get(seg);
    }

    public static void content$set(MemorySegment seg, MemoryAddress x) {
        tc_string_data_t.content$VH.set(seg, x);
    }

    public static MemoryAddress content$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) tc_string_data_t.content$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void content$set(MemorySegment seg, long index, MemoryAddress x) {
        tc_string_data_t.content$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle len$VH() {
        return tc_string_data_t.len$VH;
    }

    public static int len$get(MemorySegment seg) {
        return (int) tc_string_data_t.len$VH.get(seg);
    }

    public static void len$set(MemorySegment seg, int x) {
        tc_string_data_t.len$VH.set(seg, x);
    }

    public static int len$get(MemorySegment seg, long index) {
        return (int) tc_string_data_t.len$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void len$set(MemorySegment seg, long index, int x) {
        tc_string_data_t.len$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.ofScope(scope));
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return LinkerApi.asArray(addr, $LAYOUT(), 1, scope);
    }

    public static MemorySegment ofString(String text, ResourceScope scope) {
        MemorySegment stringData = allocate(scope);
        MemorySegment nativeString = CLinker.toCString(text, scope);
        content$set(stringData, 0, nativeString.address());
        len$set(stringData, 0, ((int) nativeString.byteSize()) - 1 // minus 1 because last symbol is u0000 in UTF-8
        );
        return stringData;
    }

    public static String toString(MemorySegment seg, ResourceScope scope) {
        if (len$get(seg) > 0) {
            return new String(
                    content$get(seg)
                            .asSegment(len$get(seg), scope)
                            .toByteArray(),
                    CHARSET
            );
        } else {
            return "";
        }
    }
}


