package tech.deplant.java4ever.ffi;
// Generated by jextract

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;

import java.lang.invoke.MethodHandle;

import static jdk.incubator.foreign.CLinker.C_CHAR;
import static jdk.incubator.foreign.CLinker.C_INT;

public interface tc_response_handler_t {

    FunctionDescriptor tc_response_handler_t$FUNC = FunctionDescriptor.ofVoid(
            C_INT,
            tc_string_data_t.$struct$LAYOUT,
            C_INT,
            C_CHAR
    );
    MethodHandle tc_response_handler_t$MH = LinkerApi.downcallHandle(
            "(ILjdk/incubator/foreign/MemorySegment;IB)V",
            tc_response_handler_t$FUNC, false
    );

    static MemoryAddress allocate(tc_response_handler_t fi) {
        return LinkerApi.upcallStub(tc_response_handler_t.class, fi, tc_response_handler_t$FUNC, "(ILjdk/incubator/foreign/MemorySegment;IB)V");
    }

    static MemoryAddress allocate(tc_response_handler_t fi, ResourceScope scope) {
        return LinkerApi.upcallStub(tc_response_handler_t.class, fi, tc_response_handler_t$FUNC, "(ILjdk/incubator/foreign/MemorySegment;IB)V", scope);
    }

    static tc_response_handler_t ofAddress(MemoryAddress addr) {
        return (int x0, jdk.incubator.foreign.MemorySegment x1, int x2, byte x3) -> {
            try {
                tc_response_handler_t$MH.invokeExact((Addressable) addr, x0, x1, x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }

    void apply(int x0, jdk.incubator.foreign.MemorySegment x1, int x2, byte x3);
}


