// Generated by jextract

package tech.deplant.java4ever.binding.ffi;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.*;

public class ton_client {

    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress va_list = Constants$root.C_POINTER$LAYOUT;
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt int_fast16_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;

    /* package-private */ ton_client() {
    }

    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return (int) 1L;
    }

    public static int _SAL_VERSION() {
        return (int) 20L;
    }

    public static int __SAL_H_VERSION() {
        return (int) 180000000L;
    }

    public static int _USE_DECLSPECS_FOR_SAL() {
        return (int) 0L;
    }

    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return (int) 0L;
    }

    public static int _CRT_PACKING() {
        return (int) 8L;
    }

    public static int _HAS_EXCEPTIONS() {
        return (int) 1L;
    }

    public static int _HAS_CXX17() {
        return (int) 0L;
    }

    public static int _HAS_CXX20() {
        return (int) 0L;
    }

    public static int _HAS_NODISCARD() {
        return (int) 0L;
    }

    public static int WCHAR_MIN() {
        return (int) 0L;
    }

    public static int WCHAR_MAX() {
        return (int) 65535L;
    }

    public static int WINT_MIN() {
        return (int) 0L;
    }

    public static int WINT_MAX() {
        return (int) 65535L;
    }

    public static int true_() {
        return (int) 1L;
    }

    public static int false_() {
        return (int) 0L;
    }

    public static int __bool_true_false_are_defined() {
        return (int) 1L;
    }

    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__va_start$MH, "__va_start");
    }

    public static void __va_start(Addressable x0, Object... x1) {
        var mh$ = __va_start$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH, "__security_init_cookie");
    }

    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH, "__security_check_cookie");
    }

    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH, "__report_gsfailure");
    }

    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout __security_cookie$LAYOUT() {
        return constants$0.__security_cookie$LAYOUT;
    }

    public static VarHandle __security_cookie$VH() {
        return constants$0.__security_cookie$VH;
    }

    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie");
    }

    public static long __security_cookie$get() {
        return (long) constants$0.__security_cookie$VH.get(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"));
    }

    public static void __security_cookie$set(long x) {
        constants$0.__security_cookie$VH.set(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"), x);
    }

    public static int tc_response_success() {
        return (int) 0L;
    }

    public static int tc_response_error() {
        return (int) 1L;
    }

    public static int tc_response_nop() {
        return (int) 2L;
    }

    public static int tc_response_app_request() {
        return (int) 3L;
    }

    public static int tc_response_app_notify() {
        return (int) 4L;
    }

    public static int tc_response_custom() {
        return (int) 100L;
    }

    public static MethodHandle tc_create_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tc_create_context$MH, "tc_create_context");
    }

    public static MemoryAddress tc_create_context(MemorySegment config) {
        var mh$ = tc_create_context$MH();
        try {
            return (MemoryAddress) mh$.invokeExact(config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_destroy_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tc_destroy_context$MH, "tc_destroy_context");
    }

    public static void tc_destroy_context(int context) {
        var mh$ = tc_destroy_context$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_request$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tc_request$MH, "tc_request");
    }

    public static void tc_request(int context, MemorySegment function_name, MemorySegment function_params_json, int request_id, Addressable response_handler) {
        var mh$ = tc_request$MH();
        try {
            mh$.invokeExact(context, function_name, function_params_json, request_id, response_handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_request_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tc_request_ptr$MH, "tc_request_ptr");
    }

    public static void tc_request_ptr(int context, MemorySegment function_name, MemorySegment function_params_json, Addressable request_ptr, Addressable response_handler) {
        var mh$ = tc_request_ptr$MH();
        try {
            mh$.invokeExact(context, function_name, function_params_json, request_ptr, response_handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_request_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tc_request_sync$MH, "tc_request_sync");
    }

    public static MemoryAddress tc_request_sync(int context, MemorySegment function_name, MemorySegment function_params_json) {
        var mh$ = tc_request_sync$MH();
        try {
            return (MemoryAddress) mh$.invokeExact(context, function_name, function_params_json);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_read_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tc_read_string$MH, "tc_read_string");
    }

    public static MemorySegment tc_read_string(SegmentAllocator allocator, Addressable handle) {
        var mh$ = tc_read_string$MH();
        try {
            return (MemorySegment) mh$.invokeExact(allocator, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tc_destroy_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tc_destroy_string$MH, "tc_destroy_string");
    }

    public static void tc_destroy_string(Addressable handle) {
        var mh$ = tc_destroy_string$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int) 4514L;
    }

    public static MemoryAddress NULL() {
        return constants$2.NULL$ADDR;
    }

    public static int INT8_MIN() {
        return (int) -128L;
    }

    public static int INT16_MIN() {
        return (int) -32768L;
    }

    public static int INT32_MIN() {
        return (int) -2147483648L;
    }

    public static long INT64_MIN() {
        return -9223372036854775808L;
    }

    public static byte INT8_MAX() {
        return (byte) 127L;
    }

    public static short INT16_MAX() {
        return (short) 32767L;
    }

    public static int INT32_MAX() {
        return (int) 2147483647L;
    }

    public static long INT64_MAX() {
        return 9223372036854775807L;
    }

    public static byte UINT8_MAX() {
        return (byte) 255L;
    }

    public static short UINT16_MAX() {
        return (short) 65535L;
    }

    public static int UINT32_MAX() {
        return (int) 4294967295L;
    }

    public static long UINT64_MAX() {
        return -1L;
    }

    public static int INT_LEAST8_MIN() {
        return (int) -128L;
    }

    public static int INT_LEAST16_MIN() {
        return (int) -32768L;
    }

    public static int INT_LEAST32_MIN() {
        return (int) -2147483648L;
    }

    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }

    public static byte INT_LEAST8_MAX() {
        return (byte) 127L;
    }

    public static short INT_LEAST16_MAX() {
        return (short) 32767L;
    }

    public static int INT_LEAST32_MAX() {
        return (int) 2147483647L;
    }

    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }

    public static byte UINT_LEAST8_MAX() {
        return (byte) 255L;
    }

    public static short UINT_LEAST16_MAX() {
        return (short) 65535L;
    }

    public static int UINT_LEAST32_MAX() {
        return (int) 4294967295L;
    }

    public static long UINT_LEAST64_MAX() {
        return -1L;
    }

    public static int INT_FAST8_MIN() {
        return (int) -128L;
    }

    public static int INT_FAST16_MIN() {
        return (int) -2147483648L;
    }

    public static int INT_FAST32_MIN() {
        return (int) -2147483648L;
    }

    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }

    public static byte INT_FAST8_MAX() {
        return (byte) 127L;
    }

    public static int INT_FAST16_MAX() {
        return (int) 2147483647L;
    }

    public static int INT_FAST32_MAX() {
        return (int) 2147483647L;
    }

    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }

    public static byte UINT_FAST8_MAX() {
        return (byte) 255L;
    }

    public static int UINT_FAST16_MAX() {
        return (int) 4294967295L;
    }

    public static int UINT_FAST32_MAX() {
        return (int) 4294967295L;
    }

    public static long UINT_FAST64_MAX() {
        return -1L;
    }

    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }

    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }

    public static long UINTPTR_MAX() {
        return -1L;
    }

    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }

    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }

    public static long UINTMAX_MAX() {
        return -1L;
    }

    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }

    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }

    public static long SIZE_MAX() {
        return -1L;
    }

    public static int SIG_ATOMIC_MIN() {
        return (int) -2147483648L;
    }

    public static int SIG_ATOMIC_MAX() {
        return (int) 2147483647L;
    }
}


