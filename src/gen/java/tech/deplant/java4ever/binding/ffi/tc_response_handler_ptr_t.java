// Generated by jextract

package tech.deplant.java4ever.binding.ffi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*tc_response_handler_ptr_t)(void* request_ptr,struct  params_json,unsigned int response_type,_Bool finished);
 * }
 */
public interface tc_response_handler_ptr_t {

    void apply(java.lang.foreign.MemorySegment request_ptr, java.lang.foreign.MemorySegment params_json, int response_type, boolean finished);
    static MemorySegment allocate(tc_response_handler_ptr_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1.const$1, fi, constants$1.const$0, scope);
    }
    static tc_response_handler_ptr_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _request_ptr, java.lang.foreign.MemorySegment _params_json, int _response_type, boolean _finished) -> {
            try {
                constants$1.const$2.invokeExact(symbol, _request_ptr, _params_json, _response_type, _finished);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


