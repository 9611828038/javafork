plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
}

// Global variables for all modules
//ext {
//
//}

group v_groupId
version v_version

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/gen/java']
        }
    }
}

dependencies {

    // RUNTIME **************************
    api "tech.deplant.java4ever:java4ever-utils:$v_version" // java4ever-utils

    // SLF4J Implementation of System.Logger (JEP 264: Platform Logging API and Service)
    implementation "org.slf4j:slf4j-jdk-platform-logging:$slf4jVersion"

    // JSON
    api platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion")
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.module:jackson-module-parameter-names"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

    // JavaPoet - Java code generation
    //implementation "com.squareup:javapoet:1.13.0"

    // TESTS **************************


    // SLF4J (Tests part)
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
    // JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/" + v_repository)
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("GH_PACKAGES_UPLOAD_TOKEN")
            }
        }
        maven {
            name = "Sonatype"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java

            groupId = v_groupId
            artifactId = v_artifactId
            version = v_version

            pom {
                name = v_artifactId
                description = "Binding library for Everscale DApp development"
                url = "https://github.com/" + v_repository
//                properties = [
//                        myProp          : "value",
//                        "prop.with.dots": "anotherValue"
//                ]
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = v_developerId
                        name = v_developerName
                        email = v_developerEmail
                        organization = v_org
                        organizationUrl = v_url
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/" + v_repository + ".git"
                    developerConnection = "scm:git:ssh://github.com/" + v_repository + ".git"
                    url = "http://github.com/" + v_repository
                }
            }
        }
    }
}

signing {
    sign publishing.publications.gpr
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addBooleanOption('-enable-preview', true)
    options.addStringOption('-release', '19')
    options.addStringOption('Xdoclint:none', '-quiet')
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
}

test {
    useJUnitPlatform()
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=java4ever.binding"

}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=java4ever.binding"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=java4ever.binding"
}