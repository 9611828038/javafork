plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "com.github.node-gradle.node" version "3.2.1" // for generating API with NodeJS script
}

// Global variables for all modules
ext {
    slf4jVersion = "1.7.36"
    junitVersion = "5.9.+"
    jacksonVersion = "2.13.3"
    v_version = "1.2.0"

    v_groupRepo = "deplant"
    v_groupId = "tech.deplant.java4ever"
    v_bindingName = "java4ever-binding"
    v_bindingRepo = "java4ever-binding"
    v_frameworkName = "java4ever-framework"
    v_frameworkRepo = "java4ever-framework"
    v_developerId = "cassandrus"
    v_developerName = "Dmitriy Yankin"
    v_developerEmail = "cassandrus@protonmail.com"
}

group v_groupId
version v_version

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/gen/java']
        }
    }
}

dependencies {

    // RUNTIME **************************

    // SLF4J Logging Framework
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    // JSON
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"

    // TESTS **************************

    // SLF4J (Tests part)
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
    // JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher" // https://github.com/gradle/gradle/issues/18627

}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/deplant/java4ever-binding")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("GH_PACKAGES_UPLOAD_TOKEN")
            }
        }
        maven {
            name = "Sonatype"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD ")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java

            groupId = v_groupId
            artifactId = v_bindingName
            version = v_version

            pom {
                name = 'java4ever/Binding'
                description = 'Binding library for Everscale DApp development'
                url = "https://github.com/deplant/" + v_bindingRepo
//                properties = [
//                        myProp          : "value",
//                        "prop.with.dots": "anotherValue"
//                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = v_developerId
                        name = v_developerName
                        email = v_developerEmail
                        organization = "deplant"
                        organizationUrl = "https://deplant.tech"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/deplant/java4ever-binding.git'
                    developerConnection = 'scm:git:ssh://github.com/deplant/java4ever-binding.git'
                    url = 'http://github.com/deplant/java4ever-binding'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.gpr
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addBooleanOption('-enable-preview', true)
    options.addStringOption('-release', '19')
}

java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(19)
//    }
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
}

test {
    useJUnitPlatform()
    jvmArgs += "--enable-preview"
    jvmArgs += "--add-modules=jdk.incubator.concurrent"
    jvmArgs += "--enable-native-access=java4ever.binding"
    jvmArgs += "-Djava.library.path=c:/opt/sdk/"
}

task generateApi(type: NodeTask) {
    script = file('src/main/nodejs/gen-java.js')
    //args = ['arg1', 'arg2']
}

tasks.withType(JavaCompile).configureEach {
//    javaCompiler = javaToolchains.compilerFor {
//        languageVersion = JavaLanguageVersion.of(19)
//    }
    options.compilerArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
//    javaLauncher = javaToolchains.launcherFor {
//        languageVersion = JavaLanguageVersion.of(19)
//    }
    jvmArgs += "--enable-preview"
    jvmArgs += "--enable-native-access=java4ever.binding"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
    jvmArgs += "-Djava.library.path=c:/opt/sdk/"
    jvmArgs += "--enable-native-access=java4ever.binding"
}

//
//task replaceVersionInREADME << {
//    // Maven
//    ant.replaceregexp(match: '<version>([0-9\\.]+)</version>', replace: "<version>${v_version}</version>", flags: 'g', byline: true) {
//        fileset(dir: '.', includes: 'README.md')
//    }
//    // Gradle
//    ant.replaceregexp(match: 'com\\.acme\\:mylibrary\\:([0-9\\.]+)', replace: "com.acme:mylibrary:${v_version}", flags: 'g', byline: true) {
//        fileset(dir: '.', includes: 'README.md')
//    }
//}